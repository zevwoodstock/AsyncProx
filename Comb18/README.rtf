{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Instructions to run:\
1. Traverse to the folder in your terminal.\
2. Type \'93export JULIA_NUM_THREADS = 4\'94\
2. Open Julia REPL. (I have made a bash script for doing the above- julia.sh)\
3. Type - include(\'93async_prox.jl\'94)\
\
\
\
Folder contents:-\
1. async_prox.jl - the main file which calls all the other files. It contains the main parameters which we can change.\
\
2. optimisation_problem.jl - The file that contains the functions we have to optimise.\
\
3. variables.jl - The file that initialises all the temporary variables.\
\
4. functions.jl - The file that contains all the helper functions needed to carry out the optimisation.\
\
5. loop.jl - The file that runs the loop over the desired number of iterations\
\
6. x1.txt, x2.txt - The values of x that have been exported from the Julia file\
\
7. prox_plot.ipynb - A jupyter notebook to plot the iteration curves for x.\
\
8. test.jl - a dummy file used for rough testing\
\
9. sync.jl - a program that can work out the same optimisation problem synchronously.\
\
\
\
Tasks to be implemented:\
1. Show the running statistics\
2. Check the feasibility\
3. Plot for all components of x}